#
# Copyright (C) 2020-2022, K2N.IO.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#

## Options {within, between} ##
### {within} will compare all benchmarks within the benchmarked version ###
### if {between} is chosen, must specify {compareVersion} (will compare benchmarked version to the specified version) ###
    ### add {compareVersion} to specify which version to compare to ###
scope=within

# Used for BETWEEN version comparisons
compareVersion=

# How many reports do you want to compare against? 
# 1 will compare this report against the most recent report in the version you are comparing against
# # > 1 will compare this report against the average of the scores of the most recent # reports in the version you are comparing against
numLatestReports=1

# How many anomalies do you want to allow?
# If the number of benchmark anomalies surpasses your specified number, CyBench benchmark runner will fail... triggering your CI/CD pipeline to halt 
anomaliesAllowed=5


# method = how benchmarks will be compared
## Options {delta, SD} ##
### if {SD} is chosen, must specify {deviationsAllowed} ###
    ### {deviationsAllowed} = the amount of deviations you will allow your score to be away from the mean of the previous X values (X specified as {numLatestReports}) ###
### if {delta} is chosen, must specify {threshold} ###
    # {threshold} = how to specify a passing benchmark 
    ## Options {percent_change, greater} ##
    ### {greater} will check to see if new score is simply greater than the compared to score ###
    ### if {percent_change} is chosen, must specify {percentChangeAllowed} ###
        ### {percentChangeAllowed} = percentage score should be within in order to pass ###
        ### ex. 5% means the new score should be within 5% of the previous threshold ###
method=delta

threshold=percent_change

percentChangeAllowed=20

deviationsAllowed=

